generator client {
  provider        = "prisma-client-js"
  // previewFeatures = ["multiSchema", "orderByNulls"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // schemas  = ["next_auth", "public"]
}

model Product {
  id              String             @id @default(cuid())
  refId           String?            @unique
  image           String?
  unit            String
  name            String
  description     String
  price           Float              @default(0)
  currentStock    Float              @default(0)
  isActive        Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@map("products")
  // @@schema("public")
}

model Purchase {
  id              Int               @id @default(autoincrement())
  userId          String            @db.Uuid
  userEmail       String
  total           Float
  note            String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  shipments       Shipment?
  detail          PurchaseDetail[]
  user            User              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  @@map("purchases")
  // @@schema("public")
}

model PurchaseDetail {
  id            Int      @id @default(autoincrement())
  purchaseId    Int
  productId     String
  purchasePrice Float
  qty           Float
  unit          String
  purchase      Purchase @relation(fields: [purchaseId], references: [id])
  
  @@map("purchase_details")
  // @@schema("public")
}

model Shipment {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  address       String
  city          String
  province      String
  postal        String
  purchaseId    Int             @unique
  purchase      Purchase        @relation(fields: [purchaseId], references: [id])

  @@map("shipments")
  // @@schema("public")
}

model Account {
  id                 String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  userId             String? @db.Uuid
  users              User?  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("accounts")
  @@unique([provider, providerAccountId], map: "provider_unique")
  // @@schema("next_auth")
}

model Session {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @unique(map: "sessiontoken_unique")
  userId       String?  @db.Uuid
  users        User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("sessions")
  // @@schema("next_auth")
}

model VerificationToken {
  identifier String?
  token      String   @id
  expires    DateTime @db.Timestamptz(6)
  @@unique([token, identifier], map: "token_identifier_unique")
  // @@schema("next_auth")

  @@map("verification_tokens")
}

model UserAddress {
  id            String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String?
  address       String?
  city          String?
  province      String?
  postal        String?
  note          String?
  userId        String     @db.Uuid
  user          User       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("user_addresses")
}

model User {
  id                String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  // id                Int               @id @default(autoincrement())
  code              String            @unique @db.VarChar(12)
  email             String?           @unique
  isActive          Boolean           @default(true)
  name              String?
  firstName         String            @db.VarChar(30)
  lastName          String?           @db.VarChar(30)
  dateOfBirth       DateTime?         @db.Date
  phone             String?           @db.VarChar(15)
  lastAccess        DateTime?
  image             String?
  role              Role              @default(user)
  // admin             User?             @relation("BlogOwnerHistory")
  // addedById         Int?              
  // addedBy           User?             @relation("BlogOwnerHistory", fields: [addedById], references: [id])
  emailVerified     DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  purchases         Purchase[]
  addresses         UserAddress[]
  accounts          Account[]
  sessions          Session[]

  @@map("users")
}

enum Role {
  user
  admin

  @@map("roles")
  // @@schema("public")
}

// user -> users table in public
// users -> users table in next_auth