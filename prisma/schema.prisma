generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "orderByNulls"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["next_auth", "public"]
}

model Product {
  id              String           @id @default(cuid())
  refId           String?          @unique
  image           String?
  unit            String
  name            String
  description     String
  price           Float            @default(0)
  currentStock    Float            @default(0)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("products")
  @@schema("public")
}

model Purchase {
  id            Int               @id @default(autoincrement())
  userId        String            @db.Uuid
  userEmail     String
  total         Float
  note          String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  shipment      Shipment?
  detail        PurchaseDetail[]
  user          User              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("purchases")
  @@schema("public")
}

model PurchaseDetail {
  id            Int      @id @default(autoincrement())
  purchaseId    Int
  productId     String
  purchasePrice Float
  qty           Float
  unit          String
  purchase      Purchase @relation(fields: [purchaseId], references: [id])

  @@map("purchase_details")
  @@schema("public")
}

model Shipment {
  id            Int             @id @default(autoincrement())
  address       String
  city          String
  province      String
  postal        String
  purchaseId    Int             @unique
  purchase      Purchase        @relation(fields: [purchaseId], references: [id])

  @@map("shipments")
  @@schema("public")
}

model accounts {
  id                 String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         BigInt?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  userId             String? @db.Uuid
  users              users?  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId], map: "provider_unique")
  @@schema("next_auth")
}

model sessions {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @unique(map: "sessiontoken_unique")
  userId       String?  @db.Uuid
  users        users?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("next_auth")
}

model verification_tokens {
  identifier String?
  token      String   @id
  expires    DateTime @db.Timestamptz(6)

  @@unique([token, identifier], map: "token_identifier_unique")
  @@schema("next_auth")
}

model users {
  id            String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String?
  email         String?    @unique(map: "email_unique")
  emailVerified DateTime?  @db.Timestamptz(6)
  image         String?
  accounts      accounts[]
  sessions      sessions[]
  users         User?

  @@schema("next_auth")
}

model User {
  id        String     @id @db.Uuid
  name      String?
  email     String?    @unique
  image     String?
  createdAt DateTime?  @default(now()) @db.Timestamp(6)
  updatedAt DateTime?  @db.Timestamp(6)
  role      Role       @default(user)
  purchases Purchase[]
  addresses UserAddresses[]
  users     users      @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("users")
  @@schema("public")
}

model UserAddresses {
  id            String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String?
  address       String?
  city          String?
  province      String?
  postal        String?
  note          String?
  userId        String     @db.Uuid
  user          User       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("user_addresses")
  @@schema("public")
}

enum Role {
  user
  admin

  @@map("roles")
  @@schema("public")
}

// user -> users table in public
// users -> users table in next_auth