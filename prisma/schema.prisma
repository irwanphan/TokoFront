generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                String             @id @default(cuid())
  refId             String?            @unique
  image             String?
  unit              String
  name              String
  description       String
  price             Float              @default(0)
  lastPurchasePrice Float              @default(0)
  currentStock      Float              @default(0)
  isActive          Boolean            @default(true)
  isTrending        Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  @@map("products")
}

model ProductView {
  id                Int                @id @default(autoincrement())
  productId         String
  @@map("product_views")
}

model Sale {
  id                Int                @id @default(autoincrement())
  userId            String             @db.Uuid
  userEmail         String
  total             Float
  note              String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  shipment          SaleShipment?
  detail            SaleDetail[]
  user              User               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@map("sales")
}

model SaleDetail {
  id                Int                @id @default(autoincrement())
  saleId            Int
  productId         String
  salePrice         Float
  qty               Float
  unit              String
  sale              Sale               @relation(fields: [saleId], references: [id])
  @@map("sale_details")
}

model SaleShipment {
  id                String             @id @default(uuid())
  address           String
  city              String
  province          String
  postal            String
  saleId            Int                @unique
  sale              Sale               @relation(fields: [saleId], references: [id])
  @@map("sale_shipments")
}

model Purchase {
  id                Int                @id @default(autoincrement())
  userId            String             @db.Uuid
  userEmail         String
  total             Float
  note              String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  shipment          PurchaseShipment?
  detail            PurchaseDetail[]
  user              User               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@map("purchases")
}

model PurchaseDetail {
  id                Int                @id @default(autoincrement())
  purchaseId        Int
  productId         String
  purchasePrice     Float
  qty               Float
  unit              String
  purchase          Purchase           @relation(fields: [purchaseId], references: [id])
  @@map("purchase_details")
}

model PurchaseShipment {
  id                String             @id @default(uuid())
  address           String
  warehouseId       String
  warehouse         Warehouse          @relation(fields: [warehouseId], references: [id])
  purchaseId        Int                @unique
  purchase          Purchase           @relation(fields: [purchaseId], references: [id])
  @@map("purchase_shipments")
}

model Warehouse {
  id                String             @id @default(uuid())
  name              String
  address           String
  city              String
  province          String
  postal            String
  note              String?
  purchaseShipment  PurchaseShipment[]
  @@map("warehouses")
}

model UserAddress {
  id                String             @id @default(uuid())
  name              String?
  address           String?
  city              String?
  province          String?
  postal            String?
  note              String?
  userId            String             @db.Uuid
  user              User               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@map("user_addresses")
}

model User {
  id                String             @id @default(uuid()) @db.Uuid
  code              String             @unique
  email             String?            @unique
  isActive          Boolean            @default(true)
  name              String
  firstName         String?            @db.VarChar(30)
  lastName          String?            @db.VarChar(30)
  dateOfBirth       DateTime?          @db.Date
  phone             String?            @db.VarChar(15)
  lastAccess        DateTime?
  image             String?
  role              Role               @default(user)
  emailVerified     DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  sales             Sale[]
  purchase          Purchase[]
  addresses         UserAddress[]
  @@map("users")
}

enum Role {
  user
  admin
  @@map("roles")
}

model Setting {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  description       String
  value             String             @default("")
  updatedAt         DateTime           @updatedAt
  updatedBy         String             @default("")
  @@map("settings")
}